export const THEORY_QUESTIONS = {
  Html: [
    { id: 1, question: 'What is HTML and why is it used?', answer: 'HTML stands for HyperText Markup Language. It is used to create and structure content on the web, such as text, images, and links.' },
    { id: 2, question: 'What is the difference between HTML elements and tags?', answer: 'HTML tags are the actual markup that is used to create HTML elements. Elements are the complete set of start tag, content, and end tag.' },
    { id: 3, question: 'What are semantic HTML elements?', answer: 'Semantic HTML elements provide meaning to the web content they enclose. Examples include <header>, <footer>, <article>, and <section>.' },
    { id: 4, question: 'What is the purpose of the <head> tag in HTML?', answer: 'The <head> tag contains meta-information about the document, such as the title, character set, styles, and scripts.' },
    { id: 5, question: 'How do you create a hyperlink in HTML?', answer: 'You create a hyperlink using the <a> tag with the href attribute. Example: <a href="https://example.com">Link</a>.' },
    { id: 6, question: 'What is the purpose of the <div> tag?', answer: 'The <div> tag is used to group and style content. It has no semantic meaning but is useful for layout and styling with CSS.' },
    { id: 7, question: 'What are HTML attributes? Give an example.', answer: 'Attributes provide additional information about an HTML element. Example: <img src="image.jpg" alt="description">' },
    { id: 8, question: 'How do you include CSS in an HTML document?', answer: 'CSS can be included using a <style> tag in the <head>, an external stylesheet linked via <link>, or inline styles with the style attribute.' },
    { id: 9, question: 'What is the role of the <meta> tag?', answer: 'The <meta> tag provides metadata such as character encoding, page description, and keywords for search engines.' },
    { id: 10, question: 'What are HTML forms and how are they used?', answer: 'HTML forms allow users to submit data. Forms are created using the <form> tag and include elements like <input>, <select>, and <textarea>.' },
    { id: 11, question: 'How do you create an ordered list in HTML?', answer: 'An ordered list is created using the <ol> tag with <li> tags for list items. Example: <ol><li>Item 1</li><li>Item 2</li></ol>.' },
    { id: 12, question: 'What is the purpose of the <table> tag in HTML?', answer: 'The <table> tag is used to create a table. It is typically used with <tr> for table rows, <th> for headers, and <td> for table data.' },
    { id: 13, question: 'How do you embed a video in HTML?', answer: 'A video can be embedded using the <video> tag with the src attribute. Example: <video src="video.mp4" controls></video>.' },
    { id: 14, question: 'What is the difference between <section> and <article> tags?', answer: '<section> is a generic container for thematic grouping of content, while <article> represents a self-contained composition that can be distributed independently.' },
    { id: 15, question: 'How do you create a form with radio buttons in HTML?', answer: 'Radio buttons are created using the <input type="radio"> tag. Each radio button should have the same name attribute but different values.' },
    { id: 16, question: 'What are the main attributes used in the <a> tag?', answer: 'The main attributes include href (URL), target (where to open the link), and rel (relationship between the linked resource and the current document).' },
    { id: 17, question: 'What is the purpose of the <iframe> tag?', answer: 'The <iframe> tag is used to embed another HTML page within the current page. It is often used to include content from external sources.' },
    { id: 18, question: 'How do you add a comment in HTML?', answer: 'Comments are added using <!-- comment here -->. They are not displayed in the browser but can be viewed in the page source.' },
    { id: 19, question: 'What is the use of the <link> tag in HTML?', answer: 'The <link> tag is used to link external resources, such as stylesheets, to the HTML document. It is commonly used for including CSS files.' },
    { id: 20, question: 'How do you use the <script> tag in HTML?', answer: 'The <script> tag is used to include JavaScript code in an HTML document. It can either include inline code or link to an external JavaScript file.' },
    { id: 21, question: 'What is the difference between <strong> and <b> tags?', answer: '<strong> indicates that the text is of strong importance and is typically rendered in bold, while <b> simply makes the text bold without implying any added importance.' },
    { id: 22, question: 'What is the purpose of the <noscript> tag?', answer: 'The <noscript> tag is used to provide alternative content for users who have JavaScript disabled in their browsers.' },
    { id: 23, question: 'How do you specify character encoding in HTML?', answer: 'Character encoding can be specified using the <meta charset="UTF-8"> tag within the <head> section of the document.' },
    { id: 24, question: 'What are the different types of list elements in HTML?', answer: 'The different types are ordered lists (<ol>), unordered lists (<ul>), and definition lists (<dl>, <dt>, <dd>).' },
    { id: 25, question: 'How can you include external fonts in your HTML document?', answer: 'External fonts can be included using the @font-face rule in CSS or by linking to font services like Google Fonts.' },
    { id: 26, question: 'What is the role of the <form> tag in HTML?', answer: 'The <form> tag is used to create interactive forms that allow users to submit data to a server. It contains form controls such as text fields, buttons, and checkboxes.' },
    { id: 27, question: 'What is the purpose of the <label> tag in HTML?', answer: 'The <label> tag is used to define labels for form controls. It improves accessibility by associating a label with a specific form element.' },
    { id: 28, question: 'How do you create a dropdown menu in HTML?', answer: 'A dropdown menu is created using the <select> tag, with <option> tags for each item in the menu.' },
    { id: 29, question: 'What is the use of the <meta name="viewport"> tag?', answer: 'The <meta name="viewport"> tag is used to control the layout on mobile browsers by specifying the viewport width and scaling.' },
    { id: 30, question: 'What is the difference between <em> and <i> tags?', answer: '<em> indicates emphasized text with semantic meaning and is typically rendered in italics, while <i> simply styles text in italics without adding semantic meaning.' },
  ],
  Css: [
    { id: 1, question: 'What is CSS and why is it used?', answer: 'CSS stands for Cascading Style Sheets. It is used to control the presentation and layout of web pages, including colors, fonts, and spacing.' },
    { id: 2, question: 'What are selectors in CSS?', answer: 'Selectors are patterns used to select the elements you want to style. Examples include element selectors (e.g., p), class selectors (e.g., .class-name), and ID selectors (e.g., #id-name).' },
    { id: 3, question: 'What is the box model in CSS?', answer: 'The box model describes how the content, padding, border, and margin are used to layout elements on a web page.' },
    { id: 4, question: 'How can you center a block element horizontally?', answer: 'You can center a block element horizontally using margin: auto and specifying a width for the element.' },
    { id: 5, question: 'What are pseudo-classes in CSS?', answer: 'Pseudo-classes are keywords added to selectors that specify a special state of the selected elements. Examples include :hover, :focus, and :nth-child().' },
    { id: 6, question: 'What is Flexbox in CSS?', answer: 'Flexbox is a layout model in CSS that allows you to design complex layouts with ease. It enables flexible and responsive layouts by distributing space within a container.' },
    { id: 7, question: 'How do you use media queries in CSS?', answer: 'Media queries are used to apply different styles for different devices or screen sizes. Example: @media (max-width: 600px) { /* styles */ }' },
    { id: 8, question: 'What is a CSS Grid layout?', answer: 'CSS Grid Layout is a two-dimensional layout system for creating grid-based designs. It allows you to design complex layouts with rows and columns.' },
    { id: 9, question: 'What is the difference between class and ID selectors in CSS?', answer: 'Class selectors are reusable and apply styles to multiple elements. ID selectors are unique and apply styles to a single element.' },
    { id: 10, question: 'What are CSS variables?', answer: 'CSS variables (custom properties) allow you to store values that can be reused throughout your CSS. Example: --main-color: blue;' },
    { id: 11, question: 'What is the use of the :root pseudo-class in CSS?', answer: ':root is used to target the highest-level parent of the document, often used for defining global CSS variables.' },
    { id: 12, question: 'How do you apply a style to every nth child of an element?', answer: 'You can use the :nth-child() pseudo-class. Example: div:nth-child(2) { /* styles */ }' },
    { id: 13, question: 'What is the purpose of the display property in CSS?', answer: 'The display property specifies how an element should be displayed on the page. Common values include block, inline, and none.' },
    { id: 14, question: 'How can you create a responsive layout using CSS?', answer: 'Responsive layouts can be created using flexible grid systems, media queries, and responsive units such as percentages and viewport units.' },
    { id: 15, question: 'What is the difference between padding and margin in CSS?', answer: 'Padding is the space inside an element, between the content and the border, while margin is the space outside an element, between the border and other elements.' },
    { id: 16, question: 'What is the purpose of the z-index property in CSS?', answer: 'The z-index property controls the stacking order of positioned elements. Higher values are in front of lower values.' },
    { id: 17, question: 'How can you create a CSS animation?', answer: 'CSS animations can be created using the @keyframes rule to define the animation steps and the animation property to apply the animation to an element.' },
    { id: 18, question: 'What is the difference between absolute and relative positioning in CSS?', answer: 'Absolute positioning removes the element from the normal flow and positions it relative to its nearest positioned ancestor, while relative positioning keeps the element in the normal flow but offsets it from its normal position.' },
    { id: 19, question: 'How do you create a responsive navigation menu?', answer: 'A responsive navigation menu can be created using media queries to adjust styles for different screen sizes and Flexbox or CSS Grid for layout adjustments.' },
    { id: 20, question: 'What is the purpose of the :focus pseudo-class in CSS?', answer: 'The :focus pseudo-class applies styles to an element that has keyboard focus, typically used for form elements and interactive content.' },
    { id: 21, question: 'What are CSS transitions?', answer: 'CSS transitions allow you to change property values smoothly over a given duration. They are defined using the transition property.' },
    { id: 22, question: 'How do you hide an element in CSS?', answer: 'You can hide an element using display: none; or visibility: hidden;. display: none; removes the element from the layout, while visibility: hidden; hides it but keeps its space in the layout.' },
    { id: 23, question: 'What is the use of the ::before and ::after pseudo-elements?', answer: 'The ::before and ::after pseudo-elements are used to insert content before or after the content of an element, often used for decorative purposes.' },
    { id: 24, question: 'How can you align text to the center in CSS?', answer: 'Text can be aligned to the center using text-align: center; on the containing element.' },
    { id: 25, question: 'What is the difference between inline and block elements?', answer: 'Inline elements do not start on a new line and only take up as much width as necessary, while block elements start on a new line and take up the full width available.' },
    { id: 26, question: 'How do you apply a border to an element in CSS?', answer: 'A border can be applied using the border property. Example: border: 1px solid black; which sets the width, style, and color of the border.' },
    { id: 27, question: 'What is the use of the background property in CSS?', answer: 'The background property is used to set the background color, image, and positioning of an element. It can be used as a shorthand for background-color, background-image, background-position, etc.' },
    { id: 28, question: 'How do you apply styles to a specific child element?', answer: 'Styles can be applied to specific child elements using the :nth-child() or :nth-of-type() pseudo-classes.' },
    { id: 29, question: 'What is a CSS preprocessor and name a few examples?', answer: 'A CSS preprocessor extends CSS with features like variables, nesting, and functions. Examples include Sass, Less, and Stylus.' },
    { id: 30, question: 'How do you use the box-shadow property in CSS?', answer: 'The box-shadow property adds shadow effects around an element’s frame. Example: box-shadow: 2px 2px 5px rgba(0,0,0,0.5);' },
  ],
  Javascript: [
    { id: 1, question: 'What is JavaScript and where is it used?', answer: 'JavaScript is a programming language used to create interactive and dynamic content on the web. It is used in web development to handle events, manipulate the DOM, and communicate with servers.' },
    { id: 2, question: 'What are the different data types in JavaScript?', answer: 'JavaScript has several data types including undefined, null, boolean, number, string, object, and symbol.' },
    { id: 3, question: 'What is a closure in JavaScript?', answer: 'A closure is a feature where a function retains access to its lexical scope even after the function has finished executing.' },
    { id: 4, question: 'What is the difference between var, let, and const?', answer: 'var declares a variable with function scope, let declares a variable with block scope, and const declares a constant with block scope.' },
    { id: 5, question: 'What are promises in JavaScript?', answer: 'Promises are objects representing the eventual completion or failure of an asynchronous operation. They provide a way to handle asynchronous code.' },
    { id: 6, question: 'What is the purpose of the this keyword in JavaScript?', answer: 'The this keyword refers to the object that is executing the current function, and its value depends on how the function is called.' },
    { id: 7, question: 'How does event delegation work in JavaScript?', answer: 'Event delegation involves attaching a single event listener to a parent element that handles events for its child elements. This improves performance and simplifies event management.' },
    { id: 8, question: 'What is the DOM?', answer: 'The DOM (Document Object Model) is a programming interface for HTML and XML documents. It represents the page so that programs can change the document structure, style, and content.' },
    { id: 9, question: 'What are arrow functions in JavaScript?', answer: 'Arrow functions are a shorthand syntax for writing function expressions. They do not have their own this context and are often used for shorter function expressions.' },
    { id: 10, question: 'What is asynchronous programming in JavaScript?', answer: 'Asynchronous programming allows code to execute without blocking other operations. It is typically handled using callbacks, promises, or async/await syntax.' },
    { id: 11, question: 'What is the event loop in JavaScript?', answer: 'The event loop is a mechanism that allows JavaScript to perform non-blocking operations by using an event-driven model and handling asynchronous code execution.' },
    { id: 12, question: 'What are the different ways to create an object in JavaScript?', answer: 'Objects can be created using object literals, the new Object() syntax, or constructor functions and classes.' },
    { id: 13, question: 'What is the difference between == and === in JavaScript?', answer: '== is a loose equality operator that performs type coercion, while === is a strict equality operator that does not perform type coercion and requires both values and types to be the same.' },
    { id: 14, question: 'What is a callback function in JavaScript?', answer: 'A callback function is a function passed as an argument to another function that is invoked after the completion of some operation.' },
    { id: 15, question: 'What is the purpose of the Array.prototype.map() method?', answer: 'The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.' },
    { id: 16, question: 'How do you handle errors in JavaScript?', answer: 'Errors can be handled using try...catch blocks to catch exceptions and handle them gracefully. You can also use .catch() with promises.' },
    { id: 17, question: 'What is the purpose of the fetch API?', answer: 'The fetch API provides a way to make network requests and handle responses in a more flexible and readable way compared to XMLHttpRequest.' },
    { id: 18, question: 'What are JavaScript modules?', answer: 'JavaScript modules are a way to break up code into reusable pieces. They allow you to export and import functions, objects, and values between different files.' },
    { id: 19, question: 'What is event bubbling in JavaScript?', answer: 'Event bubbling is a mechanism where an event starts from the innermost element and propagates outward to the outer elements.' },
    { id: 20, question: 'How does the JavaScript "prototype" work?', answer: 'JavaScript objects have a prototype property that is used for inheritance. An object’s prototype is another object from which it inherits properties and methods.' },
    { id: 21, question: 'What is the difference between synchronous and asynchronous code?', answer: 'Synchronous code is executed sequentially, while asynchronous code allows operations to run in parallel without blocking the execution of subsequent code.' },
    { id: 22, question: 'What is a promise chain?', answer: 'A promise chain is a sequence of promises where each promise is executed after the previous one has resolved, allowing for sequential asynchronous operations.' },
    { id: 23, question: 'What is the use of the reduce() method in JavaScript?', answer: 'The reduce() method applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.' },
    { id: 24, question: 'What is the purpose of the prototype chain?', answer: 'The prototype chain allows objects to inherit properties and methods from other objects through the prototype property, enabling shared behavior across instances.' },
    { id: 25, question: 'What is the role of the JavaScript Engine?', answer: 'The JavaScript engine is responsible for executing JavaScript code. It parses and compiles the code, manages memory, and performs optimizations.' },
    { id: 26, question: 'What is the difference between the arguments object and rest parameters?', answer: 'The arguments object is an array-like object available within functions, while rest parameters allow you to represent an indefinite number of arguments as an array.' },
    { id: 27, question: 'What is destructuring in JavaScript?', answer: 'Destructuring is a syntax that allows you to unpack values from arrays or properties from objects into distinct variables.' },
    { id: 28, question: 'What is the purpose of the setTimeout() function?', answer: 'The setTimeout() function is used to execute a piece of code after a specified delay, useful for scheduling tasks in the future.' },
    { id: 29, question: 'What is the difference between map() and forEach() methods?', answer: 'map() creates a new array with the results of calling a provided function on every element, while forEach() executes a provided function on each element without creating a new array.' },
    { id: 30, question: 'What is the difference between call() and apply() methods?', answer: 'call() and apply() are methods used to invoke functions with a given this value and arguments. call() takes arguments individually, while apply() takes arguments as an array.' },
  ],
  C: [
    { id: 1, question: 'What is a pointer in C?', answer: 'A pointer is a variable that stores the memory address of another variable. Pointers are used for dynamic memory allocation and manipulation of arrays.' },
    { id: 2, question: 'What are the basic data types in C?', answer: 'The basic data types in C include int, char, float, and double. They represent integer, character, floating-point, and double-precision floating-point values, respectively.' },
    { id: 3, question: 'What is a structure in C?', answer: 'A structure is a user-defined data type that allows grouping of variables of different types under a single name.' },
    { id: 4, question: 'What is the difference between stack and heap memory in C?', answer: 'Stack memory is used for static memory allocation and function calls, while heap memory is used for dynamic memory allocation. Stack memory is managed automatically, whereas heap memory requires manual management.' },
    { id: 5, question: 'What is the purpose of the static keyword in C?', answer: 'The static keyword controls the visibility and lifetime of variables and functions. It keeps the value of a variable persistent between function calls and restricts the visibility of functions and variables.' },
    { id: 6, question: 'What is a function pointer in C?', answer: 'A function pointer is a pointer that points to a function. It allows for dynamic function calls and can be used to implement callback functions.' },
    { id: 7, question: 'What is the use of void pointers in C?', answer: 'Void pointers are pointers that do not have a specific type. They are used for generic data handling and can be cast to any other pointer type.' },
    { id: 8, question: 'How do you handle errors in C?', answer: 'Errors in C can be handled using return values and error codes, or by using the standard error handling library functions like perror and strerror.' },
    { id: 9, question: 'What is a macro in C?', answer: 'A macro is a preprocessor directive that defines a symbolic name for a code snippet. It is used for code replacement before compilation.' },
    { id: 10, question: 'What is the difference between ++i and i++ in C?', answer: 'The difference is that ++i increments the value of i before the expression is evaluated, while i++ increments the value of i after the expression is evaluated.' },
    { id: 11, question: 'What is the purpose of the typedef keyword in C?', answer: 'The typedef keyword is used to create new data type names (aliases) for existing types, improving code readability and maintainability.' },
    { id: 12, question: 'What is the difference between pass-by-value and pass-by-reference?', answer: 'In pass-by-value, a copy of the actual value is passed to functions, while in pass-by-reference, the address of the value is passed, allowing the function to modify the original value.' },
    { id: 13, question: 'What is the use of the sizeof operator in C?', answer: 'The sizeof operator returns the size (in bytes) of a data type or variable, useful for memory management and array indexing.' },
    { id: 14, question: 'What is a dangling pointer?', answer: 'A dangling pointer is a pointer that references a memory location that has been deallocated or freed, leading to undefined behavior.' },
    { id: 15, question: 'How do you allocate and deallocate memory dynamically in C?', answer: 'Memory can be allocated using malloc(), calloc(), or realloc(), and deallocated using free().' },
    { id: 16, question: 'What is the difference between strcat() and strcpy() functions?', answer: 'strcat() appends one string to the end of another, while strcpy() copies one string into another, including the null terminator.' },
    { id: 17, question: 'How do you declare a constant in C?', answer: 'Constants are declared using the const keyword. Example: const int MAX = 100;' },
    { id: 18, question: 'What is the purpose of the assert() function in C?', answer: 'The assert() function is used to check assumptions in code during debugging. If an assertion fails, it terminates the program and displays an error message.' },
    { id: 19, question: 'What is the use of the extern keyword in C?', answer: 'The extern keyword is used to declare a variable or function that is defined in another file, facilitating code modularity and linking.' },
    { id: 20, question: 'What is the difference between struct and union in C?', answer: 'A struct allocates separate memory for each member, while a union allocates a single shared memory space for all its members.' },
    { id: 21, question: 'How do you perform bitwise operations in C?', answer: 'Bitwise operations are performed using operators like &, |, ^, ~, <<, and >> to manipulate individual bits of data.' },
    { id: 22, question: 'What is the use of the volatile keyword in C?', answer: 'The volatile keyword tells the compiler that a variable may be changed by external factors, preventing optimization that assumes constant values.' },
    { id: 23, question: 'What are the common string handling functions in C?', answer: 'Common string handling functions include strlen(), strcat(), strcpy(), strcmp(), and strstr().' },
    { id: 24, question: 'How do you handle multi-dimensional arrays in C?', answer: 'Multi-dimensional arrays are handled using multiple sets of square brackets. Example: int matrix[3][4];' },
    { id: 25, question: 'What is the use of the continue statement in C?', answer: 'The continue statement skips the current iteration of a loop and proceeds with the next iteration.' },
    { id: 26, question: 'What is the difference between a function declaration and a function definition?', answer: 'A function declaration provides the function’s signature, while a function definition provides the actual implementation of the function.' },
    { id: 27, question: 'What is a segmentation fault in C?', answer: 'A segmentation fault is a type of error that occurs when a program attempts to access a memory location that it is not allowed to access.' },
    { id: 28, question: 'What is the purpose of the main() function in C?', answer: 'The main() function is the entry point of a C program. It is where execution begins and where program control starts.' },
    { id: 29, question: 'How do you handle command-line arguments in C?', answer: 'Command-line arguments are handled using the main() function’s parameters: int main(int argc, char *argv[]); argc is the number of arguments, and argv is an array of argument strings.' },
    { id: 30, question: 'What is the role of header files in C?', answer: 'Header files contain declarations of functions and macros, which allow code in different files to share definitions and prototypes.' },
  ],
  Cpp: [
    { id: 1, question: 'What is object-oriented programming (OOP) in C++?', answer: 'Object-oriented programming in C++ is a programming paradigm that uses objects and classes to structure and design software. It focuses on concepts like inheritance, polymorphism, encapsulation, and abstraction.' },
    { id: 2, question: 'What are constructors and destructors in C++?', answer: 'Constructors are special member functions that initialize objects, while destructors are special member functions that clean up resources when an object is destroyed.' },
    { id: 3, question: 'What is inheritance in C++?', answer: 'Inheritance is a mechanism that allows a class to inherit properties and behaviors from another class. The derived class inherits attributes and methods from the base class.' },
    { id: 4, question: 'What is polymorphism in C++?', answer: 'Polymorphism is the ability of a function or method to operate in different ways based on the context. It can be achieved through function overloading and operator overloading.' },
    { id: 5, question: 'What is encapsulation in C++?', answer: 'Encapsulation is the practice of bundling data and methods that operate on that data into a single unit, or class, and restricting access to some of the object’s components.' },
    { id: 6, question: 'What is abstraction in C++?', answer: 'Abstraction is the concept of hiding the complex implementation details and showing only the essential features of an object.' },
    { id: 7, question: 'What are virtual functions in C++?', answer: 'Virtual functions are member functions in a base class that you expect to override in derived classes. They enable dynamic polymorphism by allowing the function to be overridden in a derived class.' },
    { id: 8, question: 'What is the difference between public, protected, and private access specifiers?', answer: 'Public members are accessible from outside the class, protected members are accessible only within the class and its derived classes, and private members are accessible only within the class itself.' },
    { id: 9, question: 'What is operator overloading in C++?', answer: 'Operator overloading allows you to define custom behavior for operators (like +, -, *, etc.) when they are applied to user-defined types.' },
    { id: 10, question: 'What are templates in C++?', answer: 'Templates are a feature in C++ that allows you to write generic and reusable code. You can define functions or classes that work with any data type.' },
    { id: 11, question: 'What is a namespace in C++?', answer: 'Namespaces are used to organize code into logical groups and to prevent name conflicts by allowing the same name to be used in different contexts.' },
    { id: 12, question: 'What is the role of the Standard Template Library (STL) in C++?', answer: 'The STL provides a collection of template classes and functions, including containers, algorithms, and iterators, which can be used to efficiently handle data and perform operations on it.' },
    { id: 13, question: 'What is the difference between stack and heap memory in C++?', answer: 'Stack memory is used for static memory allocation and function call management, while heap memory is used for dynamic memory allocation and requires manual management.' },
    { id: 14, question: 'What are smart pointers in C++?', answer: 'Smart pointers are objects that manage the lifetime of dynamically allocated memory and ensure proper cleanup. They help avoid memory leaks and dangling pointers.' },
    { id: 15, question: 'What is the purpose of the friend keyword in C++?', answer: 'The friend keyword allows a class or function to access private and protected members of another class, providing a controlled way to access internal data.' },
    { id: 16, question: 'What is the difference between a class and a struct in C++?', answer: 'In C++, a class and a struct are similar, but the default access specifier for members is private in a class and public in a struct.' },
    { id: 17, question: 'What are the different types of inheritance in C++?', answer: 'The different types of inheritance are single inheritance, multiple inheritance, hierarchical inheritance, and hybrid inheritance.' },
    { id: 18, question: 'What is exception handling in C++?', answer: 'Exception handling is a mechanism to handle runtime errors and exceptional conditions using try, catch, and throw statements, allowing programs to respond to unexpected events.' },
    { id: 19, question: 'What is a virtual destructor in C++?', answer: 'A virtual destructor is a destructor in a base class that ensures derived class destructors are called properly when deleting objects through a base class pointer.' },
    { id: 20, question: 'What are pure virtual functions in C++?', answer: 'Pure virtual functions are functions declared in a base class with = 0 and must be overridden in derived classes. They make the base class abstract.' },
    { id: 21, question: 'What is the purpose of the static keyword in C++?', answer: 'The static keyword in C++ is used to limit the visibility of variables and functions to the file scope or within a class and to preserve the value of variables across function calls.' },
    { id: 22, question: 'What is RAII in C++?', answer: 'RAII (Resource Acquisition Is Initialization) is a programming idiom where resources are acquired and released by objects, lifetimes, ensuring automatic resource management.' },
    { id: 23, question: 'What is the role of the move constructor in C++?', answer: 'The move constructor transfers resources from one object to another, enabling efficient transfer of resources and avoiding unnecessary copying.' },
    { id: 24, question: 'What are lambda expressions in C++?', answer: 'Lambda expressions are anonymous functions defined inline, used to create function objects on the fly. They capture variables from their surrounding scope.' },
    { id: 25, question: 'What is the purpose of the new and delete operators in C++?', answer: 'The new operator allocates memory on the heap, while the delete operator deallocates memory. They are used for dynamic memory management.' },
    { id: 26, question: 'What is the purpose of the explicit keyword in C++?', answer: 'The explicit keyword prevents implicit conversions that might lead to unexpected results or errors, ensuring that constructors and conversion operators are only invoked explicitly.' },
    { id: 27, question: 'What is multiple inheritance in C++?', answer: 'Multiple inheritance is a feature that allows a class to inherit from more than one base class, combining features from multiple parent classes.' },
    { id: 28, question: 'What is the use of the override keyword in C++?', answer: 'The override keyword indicates that a method is intended to override a virtual method in a base class, ensuring that the base class method is overridden correctly.' },
    { id: 29, question: 'What is the role of the virtual keyword in C++?', answer: 'The virtual keyword allows a method to be overridden in derived classes, enabling dynamic dispatch and polymorphism.' },
    { id: 30, question: 'What are the different types of constructors in C++?', answer: 'The different types of constructors in C++ are default constructors, parameterized constructors, and copy constructors.' },
  ],
  Linux: [
    { id: 1, question: 'What is Linux?', answer: 'Linux is an open-source operating system kernel that is the core component of a Linux distribution. It is known for its stability, security, and flexibility.' },
    { id: 2, question: 'What is a Linux distribution?', answer: 'A Linux distribution (distro) is a packaged version of the Linux operating system that includes the Linux kernel along with a set of software applications and tools.' },
    { id: 3, question: 'What is the purpose of the root user in Linux?', answer: 'The root user, or superuser, has unrestricted access to all commands and files on a Linux system. It is used for administrative tasks and system management.' },
    { id: 4, question: 'What is a package manager in Linux?', answer: 'A package manager is a tool that automates the process of installing, updating, configuring, and removing software packages in a Linux system.' },
    { id: 5, question: 'What is the difference between a hard link and a symbolic link in Linux?', answer: 'A hard link points directly to the inode of a file, while a symbolic link (symlink) is a reference to another file name. Hard links share the same inode number, whereas symbolic links have their own inode.' },
    { id: 6, question: 'What is the purpose of the /etc directory in Linux?', answer: 'The /etc directory contains system-wide configuration files and shell scripts used for system administration and configuration.' },
    { id: 7, question: 'What is the Linux command to list files and directories?', answer: 'The `ls` command is used to list files and directories in the current directory. Options can be added to modify its output.' },
    { id: 8, question: 'How do you check the available disk space in Linux?', answer: 'You can use the `df` command to check available disk space on all mounted filesystems, and `du` to check disk usage for files and directories.' },
    { id: 9, question: 'What is the purpose of the `grep` command?', answer: 'The `grep` command is used to search for text patterns within files and output the lines that match the pattern.' },
    { id: 10, question: 'How do you view the contents of a file in Linux?', answer: 'You can use commands like `cat`, `less`, or `more` to view the contents of a file. `cat` displays the entire file, while `less` and `more` provide paging functionality.' },
    { id: 11, question: 'What is the purpose of the `chmod` command?', answer: 'The `chmod` command changes the file mode (permissions) for files and directories, allowing you to control who can read, write, or execute them.' },
    { id: 12, question: 'What is the `ps` command used for in Linux?', answer: 'The `ps` command displays information about active processes. It can be used with various options to show different details about processes.' },
    { id: 13, question: 'How do you kill a process in Linux?', answer: 'You can use the `kill` command followed by the process ID (PID) to terminate a process. The `killall` command can be used to kill processes by name.' },
    { id: 14, question: 'What is the purpose of the `top` command?', answer: 'The `top` command provides a real-time view of system processes, including their resource usage and performance metrics.' },
    { id: 15, question: 'What is the `wget` command used for?', answer: 'The `wget` command is used to download files from the web via HTTP, HTTPS, or FTP protocols. It supports resuming interrupted downloads and recursive retrieval.' },
    { id: 16, question: 'What is the purpose of the `/var` directory in Linux?', answer: 'The `/var` directory contains variable data files, such as logs, mail spools, and temporary files that change during system operation.' },
    { id: 17, question: 'How do you change the hostname of a Linux system?', answer: 'You can change the hostname by editing the `/etc/hostname` file and updating the `/etc/hosts` file. After making changes, you may need to reboot or use the `hostnamectl` command.' },
    { id: 18, question: 'What is the role of the `/home` directory?', answer: 'The `/home` directory is where user-specific files and directories are stored. Each user has their own subdirectory under `/home` where personal data is kept.' },
    { id: 19, question: 'How do you create a new user in Linux?', answer: 'You can create a new user using the `useradd` command followed by the username. You may also use `adduser`, which is a more user-friendly front end to `useradd`.' },
    { id: 20, question: 'What is the purpose of the `sudo` command?', answer: 'The `sudo` command allows a permitted user to execute commands with superuser privileges or other users’ privileges as specified in the sudoers configuration file.' },
    { id: 21, question: 'How do you check the Linux kernel version?', answer: 'You can check the Linux kernel version using the `uname -r` command, which displays the kernel release version.' },
    { id: 22, question: 'What is a shell in Linux?', answer: 'A shell is a command-line interpreter that provides an interface for users to interact with the operating system by executing commands and scripts.' },
    { id: 23, question: 'What is the `crontab` command used for?', answer: 'The `crontab` command manages cron jobs, which are scheduled tasks that run automatically at specified intervals.' },
    { id: 24, question: 'How do you check network interfaces and their configurations in Linux?', answer: 'You can use the `ifconfig` command or the `ip` command (e.g., `ip addr show`) to check network interfaces and their configurations.' },
    { id: 25, question: 'What is the purpose of the `/tmp` directory?', answer: 'The `/tmp` directory is used for storing temporary files that are needed only for the duration of a session or process.' },
    { id: 26, question: 'How do you search for files in Linux?', answer: 'You can use the `find` command to search for files and directories based on various criteria such as name, size, or modification date.' },
    { id: 27, question: 'What is a tarball in Linux?', answer: 'A tarball is a compressed archive file created using the `tar` command, often used to bundle multiple files and directories into a single file for easier distribution.' },
    { id: 28, question: 'How do you view and manage system logs in Linux?', answer: 'System logs are typically stored in the `/var/log` directory. You can view and manage them using commands like `cat`, `less`, `tail`, and `grep`.' },
    { id: 29, question: 'What is the `chmod 755` command used for?', answer: 'The `chmod 755` command sets the file permissions to read, write, and execute for the owner, and read and execute for the group and others.' },
    { id: 30, question: 'How do you update and upgrade software packages in Linux?', answer: 'You can update and upgrade software packages using package managers. For Debian-based systems, use `apt update` and `apt upgrade`; for Red Hat-based systems, use `yum update` or `dnf update`.' },
  ],
}
